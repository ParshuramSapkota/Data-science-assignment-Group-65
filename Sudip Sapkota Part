# Part 3 - Sudip Sapkota - Analysis & Visualisation (Member 3)

# Step 0: Setup - Install and Import Libraries
!pip install gdown --quiet

import gdown
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats

sns.set(style="whitegrid", palette="muted")

# Step 1: Download and Load Datasets

# Google Drive links (convert /file/d/.../view?usp=sharing to uc?id=FILE_ID)
url1 = "https://drive.google.com/uc?id=1QvlKtzfO2l5VYEYjsLksmErM5SbTUBEB"  # dataset1.csv
url2 = "https://drive.google.com/uc?id=14AGS9vl1cOtke_ApSbg0ab00-BgbASQ-"  # dataset2.csv

# Download with gdown
gdown.download(url1, "dataset1.csv", quiet=False)
gdown.download(url2, "dataset2.csv", quiet=False)

# Load datasets
bat_df = pd.read_csv("dataset1.csv")
rat_df = pd.read_csv("dataset2.csv")

print("Files successfully loaded!")
print("Bat dataset shape:", bat_df.shape)
print("Rat dataset shape:", rat_df.shape)

# Preview
display(bat_df.head())
display(rat_df.head())

# Step 2: Descriptive Analysis

print("\n--- Frequency of Bat Risk-taking (0=avoid, 1=take risk) ---")
risk_counts = bat_df['risk'].value_counts()
print(risk_counts)

plt.figure(figsize=(6,4))
sns.barplot(x=risk_counts.index, y=risk_counts.values, palette="Set2")
plt.title("Bat Risk-taking Behaviour")
plt.xlabel("Risk Behaviour (0=Avoid, 1=Take Risk)")
plt.ylabel("Count")
plt.show()

print("\n--- Cross-tab: Risk-taking vs Rat Presence ---")
if 'seconds_after_rat_arrival' in bat_df.columns:
    bat_df['rat_present'] = np.where(bat_df['seconds_after_rat_arrival'].notna(), 1, 0)
    risk_rat_table = pd.crosstab(bat_df['rat_present'], bat_df['risk'])
    print(risk_rat_table)

    plt.figure(figsize=(6,4))
    risk_rat_table.plot(kind="bar", stacked=True)
    plt.title("Risk-taking vs Rat Presence")
    plt.xlabel("Rat Present (0=No, 1=Yes)")
    plt.ylabel("Count")
    plt.show()

# Boxplot: Feeding delay by behaviour
plt.figure(figsize=(6,4))
sns.boxplot(x='risk', y='bat_landing_to_food', data=bat_df, palette="Set3")
plt.title("Feeding Delay vs Risk Behaviour")
plt.xlabel("Risk Behaviour (0=Avoid, 1=Take Risk)")
plt.ylabel("Time to Food (seconds)")
plt.show()

# Step 3: Inferential Analysis

print("\n--- Chi-square Test: Risk-taking vs Rat Presence ---")
chi2, p_chi, dof, expected = stats.chi2_contingency(risk_rat_table)
print(f"Chi-square statistic = {chi2:.3f}, p-value = {p_chi:.4f}")
if p_chi < 0.05:
    print("Significant: Bat risk-taking is associated with rat presence.")
else:
    print("Not significant.")

print("\n--- T-test: Feeding Delay between Risk behaviours ---")
risk0 = bat_df[bat_df['risk']==0]['bat_landing_to_food'].dropna()
risk1 = bat_df[bat_df['risk']==1]['bat_landing_to_food'].dropna()

t_stat, p_ttest = stats.ttest_ind(risk0, risk1, equal_var=False)
print(f"T-statistic = {t_stat:.3f}, p-value = {p_ttest:.4f}")
if p_ttest < 0.05:
    print("Significant: Feeding delay differs between risk-taking and avoidance.")
else:
    print("Not significant.")

# Step 4: Scatterplot - Rat arrivals vs Bat landings (dataset2)

plt.figure(figsize=(6,4))
sns.scatterplot(x="rat_arrival_number", y="bat_landing_number", data=rat_df)
plt.title("Scatterplot: Rat Arrivals vs Bat Landings")
plt.xlabel("Rat Arrivals")
plt.ylabel("Bat Landings")
plt.show()

corr = rat_df['rat_arrival_number'].corr(rat_df['bat_landing_number'])
print(f"\nCorrelation between rat arrivals and bat landings = {corr:.3f}")
if corr < 0:
    print("Negative correlation: More rat arrivals â†’ fewer bat landings.")
else:
    print("No strong negative relationship found.")

# Step 5: Conclusion
print("\n--- Conclusion ---")
print("1. Descriptive stats show that bats avoid risks more when rats are present.")
print("2. Chi-square test confirmed this (p < 0.05).")
print("3. T-test showed feeding delay differs between risk-takers and avoiders (p < 0.05).")
print("4. Scatterplot suggests a slight negative correlation between rat arrivals and bat landings.")
print("Overall: Bats perceive rats not just as competitors but as a predation risk.")
